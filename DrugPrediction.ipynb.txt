{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-07T04:29:48.196183Z",
     "iopub.status.busy": "2022-02-07T04:29:48.195883Z",
     "iopub.status.idle": "2022-02-07T04:29:48.228199Z",
     "shell.execute_reply": "2022-02-07T04:29:48.227609Z",
     "shell.execute_reply.started": "2022-02-07T04:29:48.196149Z"
    }
   },
   "source": [
    "## Decision Tree for Medical Drug Prediction\n",
    "#### Using previous medical data to predict what drug an unknown patient would need. \n",
    "##### by Scott Schmidt\n",
    "Dataset csv can be found here: https://www.kaggle.com/prathamtripathi/drug-classification.\n",
    "Project based in IBM Decision Trees Lab for the course Machine Learning with Python. The original dataset columns and first five rows can be viewed below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-09T04:45:03.693420Z",
     "iopub.status.busy": "2022-02-09T04:45:03.692449Z",
     "iopub.status.idle": "2022-02-09T04:45:03.717767Z",
     "shell.execute_reply": "2022-02-09T04:45:03.716937Z",
     "shell.execute_reply.started": "2022-02-09T04:45:03.693363Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   Age Sex      BP Cholesterol  Na_to_K   Drug\n",
      "0   23   F    HIGH        HIGH   25.355  drugY\n",
      "1   47   M     LOW        HIGH   13.093  drugC\n",
      "2   47   M     LOW        HIGH   10.114  drugC\n",
      "3   28   F  NORMAL        HIGH    7.798  drugX\n",
      "4   61   F     LOW        HIGH   18.043  drugY\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.model_selection import train_test_split, cross_validate\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "#kaggleFile=r'/kaggle/input/drug-classification/drug200.csv' # Kaggle version\n",
    "file=r'C:\\Users\\sschm\\Desktop\\drug200.csv' # Jypiter version\n",
    "data=pd.read_csv(file) \n",
    "print(data.head())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Find missing data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-09T04:45:03.719611Z",
     "iopub.status.busy": "2022-02-09T04:45:03.719317Z",
     "iopub.status.idle": "2022-02-09T04:45:03.728050Z",
     "shell.execute_reply": "2022-02-09T04:45:03.727196Z",
     "shell.execute_reply.started": "2022-02-09T04:45:03.719579Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Missing data by column:\n",
      "Age            0.0\n",
      "Sex            0.0\n",
      "BP             0.0\n",
      "Cholesterol    0.0\n",
      "Na_to_K        0.0\n",
      "Drug           0.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "print(\"Missing data by column:\")\n",
    "findNA=data.isnull().sum().sort_values(ascending=False)/len(data)\n",
    "print(findNA) #There are no missing values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-09T04:45:03.730155Z",
     "iopub.status.busy": "2022-02-09T04:45:03.729359Z",
     "iopub.status.idle": "2022-02-09T04:45:03.749989Z",
     "shell.execute_reply": "2022-02-09T04:45:03.749020Z",
     "shell.execute_reply.started": "2022-02-09T04:45:03.730111Z"
    }
   },
   "outputs": [],
   "source": [
    "X=data.drop('Drug', axis=1)\n",
    "y=data['Drug']\n",
    "\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.33, random_state = 42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Feature Engineering\n",
    "Encode Categorical Variables is needed for this dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-09T04:45:03.751578Z",
     "iopub.status.busy": "2022-02-09T04:45:03.751148Z",
     "iopub.status.idle": "2022-02-09T04:45:03.997601Z",
     "shell.execute_reply": "2022-02-09T04:45:03.996833Z",
     "shell.execute_reply.started": "2022-02-09T04:45:03.751537Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Age</th>\n",
       "      <th>Sex</th>\n",
       "      <th>BP</th>\n",
       "      <th>Cholesterol</th>\n",
       "      <th>Na_to_K</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>189</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136</th>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51</th>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Age  Sex  BP  Cholesterol  Na_to_K\n",
       "42     1    1   1            1        1\n",
       "189    2    1   2            1        2\n",
       "90     3    1   1            2        3\n",
       "136    4    2   2            2        4\n",
       "51     5    1   1            1        5"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import category_encoders as ce\n",
    "\n",
    "# encode variables with ordinal encoding\n",
    "encoder = ce.OrdinalEncoder(cols=X.columns)\n",
    "\n",
    "X_train = encoder.fit_transform(X_train)\n",
    "X_test = encoder.transform(X_test)\n",
    "\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### DecisionTreeClassifier with gini index\n",
    "Model accuracy score with criterion gini index: 0.5667"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-09T04:45:03.999571Z",
     "iopub.status.busy": "2022-02-09T04:45:03.999337Z",
     "iopub.status.idle": "2022-02-09T04:45:04.189563Z",
     "shell.execute_reply": "2022-02-09T04:45:04.188585Z",
     "shell.execute_reply.started": "2022-02-09T04:45:03.999544Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model accuracy score with criterion gini index: 0.4091\n"
     ]
    }
   ],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "clf_gini = DecisionTreeClassifier(criterion='gini', max_depth=3, random_state=0)\n",
    "clf_gini.fit(X_train, y_train)\n",
    "y_pred_gini = clf_gini.predict(X_test)\n",
    "\n",
    "# Check accuracy score with criterion gini index\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "print('Model accuracy score with criterion gini index: {0:0.4f}'. format(accuracy_score(y_test, y_pred_gini)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Overfiting and underfiting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-09T04:45:04.191144Z",
     "iopub.status.busy": "2022-02-09T04:45:04.190925Z",
     "iopub.status.idle": "2022-02-09T04:45:04.201386Z",
     "shell.execute_reply": "2022-02-09T04:45:04.200704Z",
     "shell.execute_reply.started": "2022-02-09T04:45:04.191119Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training set score: 0.5448\n",
      "Test set score: 0.4091\n"
     ]
    }
   ],
   "source": [
    "print('Training set score: {:.4f}'.format(clf_gini.score(X_train, y_train)))\n",
    "print('Test set score: {:.4f}'.format(clf_gini.score(X_test, y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Because the test score is about 10% lower, there seems to be some indication that the data is slighty underfit. But overall, the numbers are similiar."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize decision tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-09T04:45:04.203604Z",
     "iopub.status.busy": "2022-02-09T04:45:04.203083Z",
     "iopub.status.idle": "2022-02-09T04:45:05.018360Z",
     "shell.execute_reply": "2022-02-09T04:45:05.017518Z",
     "shell.execute_reply.started": "2022-02-09T04:45:04.203569Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[Text(283.2923076923077, 380.52, 'X[2] <= 1.5\\ngini = 0.692\\nsamples = 134\\nvalue = [15, 12, 10, 35, 62]'),\n",
       " Text(103.01538461538462, 271.8, 'X[4] <= 4.0\\ngini = 0.485\\nsamples = 41\\nvalue = [0, 0, 0, 24, 17]'),\n",
       " Text(51.50769230769231, 163.07999999999998, 'gini = 0.0\\nsamples = 2\\nvalue = [0, 0, 0, 0, 2]'),\n",
       " Text(154.52307692307693, 163.07999999999998, 'X[4] <= 23.0\\ngini = 0.473\\nsamples = 39\\nvalue = [0, 0, 0, 24, 15]'),\n",
       " Text(103.01538461538462, 54.360000000000014, 'gini = 0.0\\nsamples = 5\\nvalue = [0, 0, 0, 5, 0]'),\n",
       " Text(206.03076923076924, 54.360000000000014, 'gini = 0.493\\nsamples = 34\\nvalue = [0, 0, 0, 19, 15]'),\n",
       " Text(463.5692307692308, 271.8, 'X[2] <= 2.5\\ngini = 0.698\\nsamples = 93\\nvalue = [15, 12, 10, 11, 45]'),\n",
       " Text(360.55384615384617, 163.07999999999998, 'X[4] <= 94.0\\ngini = 0.628\\nsamples = 53\\nvalue = [15, 12, 0, 0, 26]'),\n",
       " Text(309.04615384615386, 54.360000000000014, 'gini = 0.656\\nsamples = 40\\nvalue = [15, 10, 0, 0, 15]'),\n",
       " Text(412.0615384615385, 54.360000000000014, 'gini = 0.26\\nsamples = 13\\nvalue = [0, 2, 0, 0, 11]'),\n",
       " Text(566.5846153846154, 163.07999999999998, 'X[3] <= 1.5\\ngini = 0.636\\nsamples = 40\\nvalue = [0, 0, 10, 11, 19]'),\n",
       " Text(515.0769230769231, 54.360000000000014, 'gini = 0.495\\nsamples = 20\\nvalue = [0, 0, 0, 11, 9]'),\n",
       " Text(618.0923076923077, 54.360000000000014, 'gini = 0.5\\nsamples = 20\\nvalue = [0, 0, 10, 0, 10]')]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(12,8))\n",
    "from sklearn import tree\n",
    "tree.plot_tree(clf_gini.fit(X_train, y_train)) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-09T04:45:05.019645Z",
     "iopub.status.busy": "2022-02-09T04:45:05.019429Z",
     "iopub.status.idle": "2022-02-09T04:45:05.989720Z",
     "shell.execute_reply": "2022-02-09T04:45:05.988717Z",
     "shell.execute_reply.started": "2022-02-09T04:45:05.019603Z"
    }
   },
   "outputs": [
    {
     "data": {
      "image/svg+xml": [
       "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\r\n",
       "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\"\r\n",
       " \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">\r\n",
       "<!-- Generated by graphviz version 2.38.0 (20140413.2041)\r\n",
       " -->\r\n",
       "<!-- Title: Tree Pages: 1 -->\r\n",
       "<svg width=\"1039pt\" height=\"433pt\"\r\n",
       " viewBox=\"0.00 0.00 1038.50 433.00\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\">\r\n",
       "<g id=\"graph0\" class=\"graph\" transform=\"scale(1 1) rotate(0) translate(4 429)\">\r\n",
       "<title>Tree</title>\r\n",
       "<polygon fill=\"white\" stroke=\"none\" points=\"-4,4 -4,-429 1034.5,-429 1034.5,4 -4,4\"/>\r\n",
       "<!-- 0 -->\r\n",
       "<g id=\"node1\" class=\"node\"><title>0</title>\r\n",
       "<path fill=\"#f8c9ee\" stroke=\"black\" d=\"M457.5,-425C457.5,-425 296.5,-425 296.5,-425 290.5,-425 284.5,-419 284.5,-413 284.5,-413 284.5,-354 284.5,-354 284.5,-348 290.5,-342 296.5,-342 296.5,-342 457.5,-342 457.5,-342 463.5,-342 469.5,-348 469.5,-354 469.5,-354 469.5,-413 469.5,-413 469.5,-419 463.5,-425 457.5,-425\"/>\r\n",
       "<text text-anchor=\"start\" x=\"349.5\" y=\"-409.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">BP ≤ 1.5</text>\r\n",
       "<text text-anchor=\"start\" x=\"339.5\" y=\"-394.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.692</text>\r\n",
       "<text text-anchor=\"start\" x=\"329.5\" y=\"-379.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 134</text>\r\n",
       "<text text-anchor=\"start\" x=\"292.5\" y=\"-364.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [15, 12, 10, 35, 62]</text>\r\n",
       "<text text-anchor=\"start\" x=\"333.5\" y=\"-349.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugY</text>\r\n",
       "</g>\r\n",
       "<!-- 1 -->\r\n",
       "<g id=\"node2\" class=\"node\"><title>1</title>\r\n",
       "<path fill=\"#c6c5f7\" stroke=\"black\" d=\"M311.5,-306C311.5,-306 174.5,-306 174.5,-306 168.5,-306 162.5,-300 162.5,-294 162.5,-294 162.5,-235 162.5,-235 162.5,-229 168.5,-223 174.5,-223 174.5,-223 311.5,-223 311.5,-223 317.5,-223 323.5,-229 323.5,-235 323.5,-235 323.5,-294 323.5,-294 323.5,-300 317.5,-306 311.5,-306\"/>\r\n",
       "<text text-anchor=\"start\" x=\"197.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Na_to_K ≤ 4.0</text>\r\n",
       "<text text-anchor=\"start\" x=\"205.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.485</text>\r\n",
       "<text text-anchor=\"start\" x=\"199.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 41</text>\r\n",
       "<text text-anchor=\"start\" x=\"170.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 0, 24, 17]</text>\r\n",
       "<text text-anchor=\"start\" x=\"199\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugX</text>\r\n",
       "</g>\r\n",
       "<!-- 0&#45;&gt;1 -->\r\n",
       "<g id=\"edge1\" class=\"edge\"><title>0&#45;&gt;1</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M330.509,-341.907C319.7,-332.469 308.102,-322.343 297,-312.649\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"299.243,-309.961 289.408,-306.021 294.639,-315.234 299.243,-309.961\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"291.098\" y=\"-327.264\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">True</text>\r\n",
       "</g>\r\n",
       "<!-- 6 -->\r\n",
       "<g id=\"node7\" class=\"node\"><title>6</title>\r\n",
       "<path fill=\"#f5b3e7\" stroke=\"black\" d=\"M591.5,-306C591.5,-306 430.5,-306 430.5,-306 424.5,-306 418.5,-300 418.5,-294 418.5,-294 418.5,-235 418.5,-235 418.5,-229 424.5,-223 430.5,-223 430.5,-223 591.5,-223 591.5,-223 597.5,-223 603.5,-229 603.5,-235 603.5,-235 603.5,-294 603.5,-294 603.5,-300 597.5,-306 591.5,-306\"/>\r\n",
       "<text text-anchor=\"start\" x=\"483.5\" y=\"-290.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">BP ≤ 2.5</text>\r\n",
       "<text text-anchor=\"start\" x=\"473.5\" y=\"-275.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.698</text>\r\n",
       "<text text-anchor=\"start\" x=\"467.5\" y=\"-260.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 93</text>\r\n",
       "<text text-anchor=\"start\" x=\"426.5\" y=\"-245.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [15, 12, 10, 11, 45]</text>\r\n",
       "<text text-anchor=\"start\" x=\"467.5\" y=\"-230.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugY</text>\r\n",
       "</g>\r\n",
       "<!-- 0&#45;&gt;6 -->\r\n",
       "<g id=\"edge6\" class=\"edge\"><title>0&#45;&gt;6</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M423.491,-341.907C434.3,-332.469 445.898,-322.343 457,-312.649\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"459.361,-315.234 464.592,-306.021 454.757,-309.961 459.361,-315.234\"/>\r\n",
       "<text text-anchor=\"middle\" x=\"462.902\" y=\"-327.264\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">False</text>\r\n",
       "</g>\r\n",
       "<!-- 2 -->\r\n",
       "<g id=\"node3\" class=\"node\"><title>2</title>\r\n",
       "<path fill=\"#e539c0\" stroke=\"black\" d=\"M132,-179.5C132,-179.5 12,-179.5 12,-179.5 6,-179.5 0,-173.5 0,-167.5 0,-167.5 0,-123.5 0,-123.5 0,-117.5 6,-111.5 12,-111.5 12,-111.5 132,-111.5 132,-111.5 138,-111.5 144,-117.5 144,-123.5 144,-123.5 144,-167.5 144,-167.5 144,-173.5 138,-179.5 132,-179.5\"/>\r\n",
       "<text text-anchor=\"start\" x=\"43\" y=\"-164.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"start\" x=\"32.5\" y=\"-149.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 2</text>\r\n",
       "<text text-anchor=\"start\" x=\"8\" y=\"-134.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 0, 0, 2]</text>\r\n",
       "<text text-anchor=\"start\" x=\"28.5\" y=\"-119.3\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugY</text>\r\n",
       "</g>\r\n",
       "<!-- 1&#45;&gt;2 -->\r\n",
       "<g id=\"edge2\" class=\"edge\"><title>1&#45;&gt;2</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M183.672,-222.907C165.932,-210.769 146.529,-197.493 128.945,-185.462\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"130.704,-182.425 120.475,-179.667 126.751,-188.202 130.704,-182.425\"/>\r\n",
       "</g>\r\n",
       "<!-- 3 -->\r\n",
       "<g id=\"node4\" class=\"node\"><title>3</title>\r\n",
       "<path fill=\"#b6b5f5\" stroke=\"black\" d=\"M311.5,-187C311.5,-187 174.5,-187 174.5,-187 168.5,-187 162.5,-181 162.5,-175 162.5,-175 162.5,-116 162.5,-116 162.5,-110 168.5,-104 174.5,-104 174.5,-104 311.5,-104 311.5,-104 317.5,-104 323.5,-110 323.5,-116 323.5,-116 323.5,-175 323.5,-175 323.5,-181 317.5,-187 311.5,-187\"/>\r\n",
       "<text text-anchor=\"start\" x=\"193\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Na_to_K ≤ 23.0</text>\r\n",
       "<text text-anchor=\"start\" x=\"205.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.473</text>\r\n",
       "<text text-anchor=\"start\" x=\"199.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 39</text>\r\n",
       "<text text-anchor=\"start\" x=\"170.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 0, 24, 15]</text>\r\n",
       "<text text-anchor=\"start\" x=\"199\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugX</text>\r\n",
       "</g>\r\n",
       "<!-- 1&#45;&gt;3 -->\r\n",
       "<g id=\"edge3\" class=\"edge\"><title>1&#45;&gt;3</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M243,-222.907C243,-214.649 243,-205.864 243,-197.302\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"246.5,-197.021 243,-187.021 239.5,-197.021 246.5,-197.021\"/>\r\n",
       "</g>\r\n",
       "<!-- 4 -->\r\n",
       "<g id=\"node5\" class=\"node\"><title>4</title>\r\n",
       "<path fill=\"#3c39e5\" stroke=\"black\" d=\"M132,-68C132,-68 12,-68 12,-68 6,-68 0,-62 0,-56 0,-56 0,-12 0,-12 0,-6 6,-0 12,-0 12,-0 132,-0 132,-0 138,-0 144,-6 144,-12 144,-12 144,-56 144,-56 144,-62 138,-68 132,-68\"/>\r\n",
       "<text text-anchor=\"start\" x=\"43\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.0</text>\r\n",
       "<text text-anchor=\"start\" x=\"32.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 5</text>\r\n",
       "<text text-anchor=\"start\" x=\"8\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 0, 5, 0]</text>\r\n",
       "<text text-anchor=\"start\" x=\"28\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugX</text>\r\n",
       "</g>\r\n",
       "<!-- 3&#45;&gt;4 -->\r\n",
       "<g id=\"edge4\" class=\"edge\"><title>3&#45;&gt;4</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M179.326,-103.726C164.006,-93.9161 147.684,-83.4644 132.513,-73.7496\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"134.039,-70.5704 123.73,-68.1252 130.264,-76.4654 134.039,-70.5704\"/>\r\n",
       "</g>\r\n",
       "<!-- 5 -->\r\n",
       "<g id=\"node6\" class=\"node\"><title>5</title>\r\n",
       "<path fill=\"#d6d5fa\" stroke=\"black\" d=\"M311.5,-68C311.5,-68 174.5,-68 174.5,-68 168.5,-68 162.5,-62 162.5,-56 162.5,-56 162.5,-12 162.5,-12 162.5,-6 168.5,-0 174.5,-0 174.5,-0 311.5,-0 311.5,-0 317.5,-0 323.5,-6 323.5,-12 323.5,-12 323.5,-56 323.5,-56 323.5,-62 317.5,-68 311.5,-68\"/>\r\n",
       "<text text-anchor=\"start\" x=\"205.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.493</text>\r\n",
       "<text text-anchor=\"start\" x=\"199.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 34</text>\r\n",
       "<text text-anchor=\"start\" x=\"170.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 0, 19, 15]</text>\r\n",
       "<text text-anchor=\"start\" x=\"199\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugX</text>\r\n",
       "</g>\r\n",
       "<!-- 3&#45;&gt;5 -->\r\n",
       "<g id=\"edge5\" class=\"edge\"><title>3&#45;&gt;5</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M243,-103.726C243,-95.5175 243,-86.8595 243,-78.56\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"246.5,-78.2996 243,-68.2996 239.5,-78.2996 246.5,-78.2996\"/>\r\n",
       "</g>\r\n",
       "<!-- 7 -->\r\n",
       "<g id=\"node8\" class=\"node\"><title>7</title>\r\n",
       "<path fill=\"#f7c6ed\" stroke=\"black\" d=\"M583.5,-187C583.5,-187 438.5,-187 438.5,-187 432.5,-187 426.5,-181 426.5,-175 426.5,-175 426.5,-116 426.5,-116 426.5,-110 432.5,-104 438.5,-104 438.5,-104 583.5,-104 583.5,-104 589.5,-104 595.5,-110 595.5,-116 595.5,-116 595.5,-175 595.5,-175 595.5,-181 589.5,-187 583.5,-187\"/>\r\n",
       "<text text-anchor=\"start\" x=\"461\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Na_to_K ≤ 94.0</text>\r\n",
       "<text text-anchor=\"start\" x=\"473.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.628</text>\r\n",
       "<text text-anchor=\"start\" x=\"467.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 53</text>\r\n",
       "<text text-anchor=\"start\" x=\"434.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [15, 12, 0, 0, 26]</text>\r\n",
       "<text text-anchor=\"start\" x=\"467.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugY</text>\r\n",
       "</g>\r\n",
       "<!-- 6&#45;&gt;7 -->\r\n",
       "<g id=\"edge7\" class=\"edge\"><title>6&#45;&gt;7</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M511,-222.907C511,-214.649 511,-205.864 511,-197.302\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"514.5,-197.021 511,-187.021 507.5,-197.021 514.5,-197.021\"/>\r\n",
       "</g>\r\n",
       "<!-- 10 -->\r\n",
       "<g id=\"node11\" class=\"node\"><title>10</title>\r\n",
       "<path fill=\"#f8c8ee\" stroke=\"black\" d=\"M847.5,-187C847.5,-187 702.5,-187 702.5,-187 696.5,-187 690.5,-181 690.5,-175 690.5,-175 690.5,-116 690.5,-116 690.5,-110 696.5,-104 702.5,-104 702.5,-104 847.5,-104 847.5,-104 853.5,-104 859.5,-110 859.5,-116 859.5,-116 859.5,-175 859.5,-175 859.5,-181 853.5,-187 847.5,-187\"/>\r\n",
       "<text text-anchor=\"start\" x=\"720.5\" y=\"-171.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">Cholesterol ≤ 1.5</text>\r\n",
       "<text text-anchor=\"start\" x=\"737.5\" y=\"-156.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.636</text>\r\n",
       "<text text-anchor=\"start\" x=\"731.5\" y=\"-141.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 40</text>\r\n",
       "<text text-anchor=\"start\" x=\"698.5\" y=\"-126.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 10, 11, 19]</text>\r\n",
       "<text text-anchor=\"start\" x=\"731.5\" y=\"-111.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugY</text>\r\n",
       "</g>\r\n",
       "<!-- 6&#45;&gt;10 -->\r\n",
       "<g id=\"edge10\" class=\"edge\"><title>6&#45;&gt;10</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M602.593,-222.907C627.927,-211.68 655.458,-199.479 680.93,-188.19\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"682.489,-191.328 690.213,-184.076 679.653,-184.928 682.489,-191.328\"/>\r\n",
       "</g>\r\n",
       "<!-- 8 -->\r\n",
       "<g id=\"node9\" class=\"node\"><title>8</title>\r\n",
       "<path fill=\"#ffffff\" stroke=\"black\" d=\"M498.5,-68C498.5,-68 353.5,-68 353.5,-68 347.5,-68 341.5,-62 341.5,-56 341.5,-56 341.5,-12 341.5,-12 341.5,-6 347.5,-0 353.5,-0 353.5,-0 498.5,-0 498.5,-0 504.5,-0 510.5,-6 510.5,-12 510.5,-12 510.5,-56 510.5,-56 510.5,-62 504.5,-68 498.5,-68\"/>\r\n",
       "<text text-anchor=\"start\" x=\"388.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.656</text>\r\n",
       "<text text-anchor=\"start\" x=\"382.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 40</text>\r\n",
       "<text text-anchor=\"start\" x=\"349.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [15, 10, 0, 0, 15]</text>\r\n",
       "<text text-anchor=\"start\" x=\"382.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugY</text>\r\n",
       "</g>\r\n",
       "<!-- 7&#45;&gt;8 -->\r\n",
       "<g id=\"edge8\" class=\"edge\"><title>7&#45;&gt;8</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M479.349,-103.726C472.411,-94.7878 465.059,-85.3168 458.103,-76.3558\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"460.746,-74.0528 451.849,-68.2996 455.216,-78.3451 460.746,-74.0528\"/>\r\n",
       "</g>\r\n",
       "<!-- 9 -->\r\n",
       "<g id=\"node10\" class=\"node\"><title>9</title>\r\n",
       "<path fill=\"#ea5dcb\" stroke=\"black\" d=\"M669,-68C669,-68 541,-68 541,-68 535,-68 529,-62 529,-56 529,-56 529,-12 529,-12 529,-6 535,-0 541,-0 541,-0 669,-0 669,-0 675,-0 681,-6 681,-12 681,-12 681,-56 681,-56 681,-62 675,-68 669,-68\"/>\r\n",
       "<text text-anchor=\"start\" x=\"571.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.26</text>\r\n",
       "<text text-anchor=\"start\" x=\"561.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 13</text>\r\n",
       "<text text-anchor=\"start\" x=\"537\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 2, 0, 0, 11]</text>\r\n",
       "<text text-anchor=\"start\" x=\"561.5\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugY</text>\r\n",
       "</g>\r\n",
       "<!-- 7&#45;&gt;9 -->\r\n",
       "<g id=\"edge9\" class=\"edge\"><title>7&#45;&gt;9</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M546.002,-103.726C553.754,-94.6966 561.972,-85.1235 569.734,-76.0816\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"572.556,-78.1671 576.414,-68.2996 567.245,-73.6075 572.556,-78.1671\"/>\r\n",
       "</g>\r\n",
       "<!-- 11 -->\r\n",
       "<g id=\"node12\" class=\"node\"><title>11</title>\r\n",
       "<path fill=\"#dcdbfa\" stroke=\"black\" d=\"M839,-68C839,-68 711,-68 711,-68 705,-68 699,-62 699,-56 699,-56 699,-12 699,-12 699,-6 705,-0 711,-0 711,-0 839,-0 839,-0 845,-0 851,-6 851,-12 851,-12 851,-56 851,-56 851,-62 845,-68 839,-68\"/>\r\n",
       "<text text-anchor=\"start\" x=\"737.5\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.495</text>\r\n",
       "<text text-anchor=\"start\" x=\"731.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 20</text>\r\n",
       "<text text-anchor=\"start\" x=\"707\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 0, 11, 9]</text>\r\n",
       "<text text-anchor=\"start\" x=\"731\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugX</text>\r\n",
       "</g>\r\n",
       "<!-- 10&#45;&gt;11 -->\r\n",
       "<g id=\"edge11\" class=\"edge\"><title>10&#45;&gt;11</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M775,-103.726C775,-95.5175 775,-86.8595 775,-78.56\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"778.5,-78.2996 775,-68.2996 771.5,-78.2996 778.5,-78.2996\"/>\r\n",
       "</g>\r\n",
       "<!-- 12 -->\r\n",
       "<g id=\"node13\" class=\"node\"><title>12</title>\r\n",
       "<path fill=\"#ffffff\" stroke=\"black\" d=\"M1018.5,-68C1018.5,-68 881.5,-68 881.5,-68 875.5,-68 869.5,-62 869.5,-56 869.5,-56 869.5,-12 869.5,-12 869.5,-6 875.5,-0 881.5,-0 881.5,-0 1018.5,-0 1018.5,-0 1024.5,-0 1030.5,-6 1030.5,-12 1030.5,-12 1030.5,-56 1030.5,-56 1030.5,-62 1024.5,-68 1018.5,-68\"/>\r\n",
       "<text text-anchor=\"start\" x=\"921\" y=\"-52.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">gini = 0.5</text>\r\n",
       "<text text-anchor=\"start\" x=\"906.5\" y=\"-37.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">samples = 20</text>\r\n",
       "<text text-anchor=\"start\" x=\"877.5\" y=\"-22.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">value = [0, 0, 10, 0, 10]</text>\r\n",
       "<text text-anchor=\"start\" x=\"906\" y=\"-7.8\" font-family=\"Helvetica,sans-Serif\" font-size=\"14.00\">class = drugC</text>\r\n",
       "</g>\r\n",
       "<!-- 10&#45;&gt;12 -->\r\n",
       "<g id=\"edge12\" class=\"edge\"><title>10&#45;&gt;12</title>\r\n",
       "<path fill=\"none\" stroke=\"black\" d=\"M840.164,-103.726C855.988,-93.8245 872.858,-83.269 888.506,-73.4774\"/>\r\n",
       "<polygon fill=\"black\" stroke=\"black\" points=\"890.439,-76.3966 897.06,-68.1252 886.726,-70.4625 890.439,-76.3966\"/>\r\n",
       "</g>\r\n",
       "</g>\r\n",
       "</svg>\r\n"
      ],
      "text/plain": [
       "<graphviz.files.Source at 0x2a8d30baee0>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import graphviz \n",
    "dot_data = tree.export_graphviz(clf_gini, out_file=None, \n",
    "                              feature_names=X_train.columns,  \n",
    "                              class_names=y_train,  \n",
    "                              filled=True, rounded=True,  \n",
    "                              special_characters=True)\n",
    "\n",
    "graph = graphviz.Source(dot_data) \n",
    "graph"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Confusion Matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-09T04:45:05.992029Z",
     "iopub.status.busy": "2022-02-09T04:45:05.991445Z",
     "iopub.status.idle": "2022-02-09T04:45:06.002954Z",
     "shell.execute_reply": "2022-02-09T04:45:06.002168Z",
     "shell.execute_reply.started": "2022-02-09T04:45:05.991994Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix\n",
      "\n",
      " [[ 8  0  0  0  0]\n",
      " [ 4  0  0  0  0]\n",
      " [ 0  0  6  0  0]\n",
      " [ 0  0  0  7 12]\n",
      " [12  0  5  6  6]]\n"
     ]
    }
   ],
   "source": [
    "# Print the Confusion Matrix and slice it into four pieces\n",
    "from sklearn.metrics import confusion_matrix\n",
    "cm = confusion_matrix(y_test, y_pred_gini)\n",
    "print('Confusion matrix\\n\\n', cm)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decision Tree Classifier with criterion entropy \n",
    "The entropy seems to give the same measurement as the gini index. Therefore, I do not go into much other detail outside of just running the report."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2022-02-09T04:45:06.004486Z",
     "iopub.status.busy": "2022-02-09T04:45:06.004275Z",
     "iopub.status.idle": "2022-02-09T04:45:06.026822Z",
     "shell.execute_reply": "2022-02-09T04:45:06.024517Z",
     "shell.execute_reply.started": "2022-02-09T04:45:06.004461Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model accuracy score with criterion entropy: 0.4091\n",
      "Training set score: 0.5448\n",
      "Test set score: 0.4091\n"
     ]
    }
   ],
   "source": [
    "# instantiate the DecisionTreeClassifier model with criterion entropy\n",
    "clf_en = DecisionTreeClassifier(criterion='entropy', max_depth=3, random_state=0)\n",
    "clf_en.fit(X_train, y_train)\n",
    "\n",
    "#Predict the Test set results with criterion entropy\n",
    "y_pred_en = clf_en.predict(X_test)\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "print('Model accuracy score with criterion entropy: {0:0.4f}'. format(accuracy_score(y_test, y_pred_en)))\n",
    "\n",
    "#Compare the train-set and test-set accuracy to check for overfitting.\n",
    "print('Training set score: {:.4f}'.format(clf_en.score(X_train, y_train)))\n",
    "print('Test set score: {:.4f}'.format(clf_en.score(X_test, y_test)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### References:\n",
    "* https://www.kaggle.com/prashant111/decision-tree-classifier-tutorial\n",
    "* https://www.datacamp.com/community/tutorials/decision-tree-classification-python"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
